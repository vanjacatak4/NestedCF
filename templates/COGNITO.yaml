AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API

Globals:

  Function:
    Timeout: 5
    Runtime: python3.8
    Handler: app.lambda_handler


Parameters:

  Environment:
    Description: AWS Environment
    Type: String

  DeploymentPrefix:
    Description: VpcId of the Network Stack
    Type: String

  AddGroupsToScopes:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'

  AdminEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Email address for administrator


Conditions:
  ScopeGroups:
    !Equals [!Ref AddGroupsToScopes, 'true']


Resources:

  ### COGNITO ###

  ## COGNITO USER POOL

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${DeploymentPrefix}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  ## COGNITO USER POOL - one or many user pool clients per User Pool ##

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${DeploymentPrefix}-UserPoolClient
      GenerateSecret: false # set to false for web clients
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3000/
        - http://localhost:8080/
      LogoutURLs:
        - http://localhost:3000/
        - http://localhost:8080/
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit #for testing with postman
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${DeploymentPrefix}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  ## COGNITO User pool group ##

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Description: Admin user group
      Precedence: 0
      UserPoolId: !Ref UserPool

  ## COGNITO user ##

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref AdminEmail
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
      UserPoolId: !Ref UserPool

  ## Attach Admin USER to the USER GROUP in the same USER POOL ##

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref UserPool

  TriggerFunction:
    Type: AWS::Serverless::Function
    Condition: ScopeGroups
    Properties:
      Timeout: 5
      Runtime: python3.8
      Handler: app.lambda_handler
      CodeUri: ../src/cognito
      Events:
        CognitoTrigger:
          Type: Cognito
          Properties:
            Trigger: PreTokenGeneration
            UserPool: !Ref UserPool

Outputs:

  UserPoolId:
    Description: "User pool ID"
    Value: !Ref UserPool

  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref UserPoolClient

  AuthUrl:
    Description: "URL used for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com




