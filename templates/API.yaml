AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API

Globals:

  Function:
    Timeout: 5
    Runtime: python3.8
    Handler: app.lambda_handler
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_METRICS_NAMESPACE: VcatakServerlessApplication
        POWERTOOLS_SERVICE_NAME: vcatak-service


Parameters:

  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool


Resources:

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowMethods:
          - GET
        AllowOrigins:
          - "*"
      Auth:
        Authorizers:
          OAuth2Authorizer:
            AuthorizationScopes:
              - email
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
            IdentitySource: "$request.header.Authorization"



  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Description: API handler function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /hello
            Method: get
            ApiId: !Ref HttpApi

  AdminApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Description: API handler function
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /admin
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: OAuth2Authorizer
              AuthorizationScopes:
                - !Sub Admins-${Audience}

  SULambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: OAuth2Authorizer
              AuthorizationScopes:
                - !Sub SU-${Audience}
            Path: /su
            Method: get
            ApiId: !Ref HttpApi

  # Route for Admins and SU only: requires custom token (see cognito example)
  BothLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: OAuth2Authorizer
              AuthorizationScopes:
                - !Sub Admins-${Audience}
                - !Sub SU-${Audience}
            Path: /both
            Method: get
            ApiId: !Ref HttpApi
